import math

def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

def is_winner(board, player):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]],
    ]
    return [player, player, player] in win_conditions

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def minimax(board, depth, is_maximizing, alpha, beta):
    if is_winner(board, 'O'):
        return 10 - depth
    if is_winner(board, 'X'):
        return depth - 10
    if is_board_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for (i, j) in get_available_moves(board):
            board[i][j] = 'O'
            eval = minimax(board, depth + 1, False, alpha, beta)
            board[i][j] = ' '
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for (i, j) in get_available_moves(board):
            board[i][j] = 'X'
            eval = minimax(board, depth + 1, True, alpha, beta)
            board[i][j] = ' '
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def best_move(board):
    best_val = -math.inf
    best_move = None
    for (i, j) in get_available_moves(board):
        board[i][j] = 'O'
        move_val = minimax(board, 0, False, -math.inf, math.inf)
        board[i][j] = ' '
        if move_val > best_val:
            best_val = move_val
            best_move = (i, j)
    return best_move

def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    human, ai = ('X', 'O')
    
    while True:
        choice = input("Do you want to be X or O? ").upper()
        if choice in ['X', 'O']:
            human, ai = choice, 'O' if choice == 'X' else 'X'
            break
        else:
            print("Invalid choice. Please choose X or O.")
    
    current_player = human

    while True:
        print_board(board)
        if current_player == human:
            while True:
                try:
                    move = input("Enter your move (row and column): ").split()
                    move = (int(move[0]), int(move[1]))
                    if board[move[0]][move[1]] == ' ':
                        board[move[0]][move[1]] = human
                        break
                    else:
                        print("This cell is already occupied. Try again.")
                except (IndexError, ValueError):
                    print("Invalid input. Please enter row and column as two integers between 0 and 2.")
            
            if is_winner(board, human):
                print_board(board)
                print("Congratulations! You win!")
                break
            current_player = ai
        else:
            move = best_move(board)
            if move:
                board[move[0]][move[1]] = ai
                if is_winner(board, ai):
                    print_board(board)
                    print("AI wins!")
                    break
                current_player = human
        
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

play_game()

